name: Build and Update

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # 每天定时检查一次

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.4' # 可以根据需要调整Go版本

    - name: Install pnpm
      run: |
        export SHELL=/bin/bash
        curl -fsSL https://get.pnpm.io/install.sh | sh -
        export PATH=$HOME/.local/share/pnpm:$HOME/.pnpm-global/bin:$PATH
        echo "PATH=$HOME/.local/share/pnpm:$HOME/.pnpm-global/bin:$PATH" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        echo '{}' > package.json
        pnpm install

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.20.4'
        cache: 'pnpm'

    - name: Install Python and dependencies
      run: |
        sudo apt update
        sudo apt install -y python3-pip jq
        pip3 install --upgrade pip
        pip3 install pyinstaller

    - name: Get latest version of palworld-save-tools
      id: get_version
      run: |
        latest_version=$(curl -s https://api.github.com/repos/cheahjs/palworld-save-tools/releases/latest | jq -r .tag_name)
        echo "Latest version of palworld-save-tools is $latest_version"
        echo "::set-output name=latest_version::$latest_version"

    - name: Check if update is needed
      id: check_update
      run: |
        current_version=$(grep 'palworld-save-tools==' module/requirements.txt | cut -d'=' -f3)
        latest_version=${{ steps.get_version.outputs.latest_version }}
        if [ "$current_version" == "$latest_version" ]; then
          echo "No update needed"
          echo "::set-output name=update_needed::false"
        else
          echo "Update needed"
          echo "::set-output name=update_needed::true"
        fi

    - name: Update palworld-save-tools version in requirements.txt
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        latest_version=${{ steps.get_version.outputs.latest_version }}
        sed -i "s/palworld-save-tools==[0-9.]*/palworld-save-tools==$latest_version/" module/requirements.txt
        cat module/requirements.txt # Display the updated requirements.txt for verification

    - name: Run build.ps1 script
      shell: pwsh
      run: |
        cd module
        ./build.ps1

    - name: Build sav_cli
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        cd module
        chmod +x build.sh
        ./build.sh
        cd ..

    - name: Initialize and build project
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        make init
        make build-pub

    - name: Build for different platforms
      run: |
        GOOS=windows GOARCH=386 go build -ldflags="-s -w -X 'main.version='" -o ./dist/windows_x86_64/pst.exe main.go
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X 'main.version='" -o ./dist/linux_x86_64/pst main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X 'main.version='" -o ./dist/linux_aarch64/pst main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X 'main.version='" -o ./dist/darwin_arm64/pst main.go
        GOOS=windows GOARCH=386 go build -ldflags="-s -w" -o ./dist/pst-agent__windows_x86_64.exe ./cmd/pst-agent/main.go
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ./dist/pst-agent__linux_x86_64 ./cmd/pst-agent/main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ./dist/pst-agent__linux_aarch64 ./cmd/pst-agent/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o ./dist/pst-agent__darwin_arm64 ./cmd/pst-agent/main.go

    - name: Set Node options to avoid memory errors
      env:
        NODE_OPTIONS: '--max-old-space-size=8192'
      run: echo "Node options set"

    - name: Add PyInstaller to PATH
      run: echo "PATH=$PATH:/home/runner/.local/lib/python3.10/site-packages" >> $GITHUB_ENV

    - name: Verify PyInstaller installation
      run: pip3 show pyinstaller

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: |
          dist/windows_x86_64
          dist/linux_x86_64
          dist/linux_aarch64
          dist/darwin_arm64

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag: $date
        name: Release $date
        body: |
          New version of palworld-save-tools detected and built.
        draft: false
        prerelease: false
        files: |
          dist/windows_x86_64/*
          dist/linux_x86_64/*
          dist/linux_aarch64/*
          dist/darwin_arm64/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
